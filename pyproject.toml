[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "open-mpic-core"
dynamic = ["version"]
description = 'Library of core (common) MPIC functionality for Open MPIC in Python.'
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = []
authors = [
  { name = "Henry Birge-Lee", email = "henrybirgelee@gmail.com" },
  { name = "Grace Cimaszewski", email = "ghc2@princeton.edu"},
  { name = "Dmitry Sharkov", email = "dmitry.sharkov@sectigo.com" }
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "pyyaml==6.0.2",
  "requests>=2.32.3",
  "dnspython==2.7.0",
  "pydantic==2.10.6",
  "aiohttp==3.11.13",
  "black==24.8.0",
]

[project.optional-dependencies]
test = [
    "pytest==8.2.2",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest-html==4.1.1",
    "pytest-asyncio==0.25.1",
    "pytest-profiling==1.8.1",
]

[project.urls]
Documentation = "https://github.com/open-mpic/open-mpic-core-python"
Issues = "https://github.com/open-mpic/open-mpic-core-python/issues"
Source = "https://github.com/open-mpic/open-mpic-core-python"

[tool.hatch]
version.path = "src/open_mpic_core/__about__.py"
build.name = "open-mpic-core"
build.sources = ["src"]
build.targets.wheel.packages = ["src/open_mpic_core"]

[tool.hatch.build.targets.wheel.force-include]
"./tests/unit/test_util" = "open_mpic_core_test/test_util"  # include tests in the wheel to facilitate integration testing in wrapper projects

[tool.api]
spec_version = "3.3.1"
spec_repository = "https://github.com/open-mpic/open-mpic-specification"

[tool.hatch.envs.default]
skip-install = false
type="virtual"
path="venv"

[tool.hatch.envs.test]
features = [
    "test" # each element here must be defined in 'project.optional-dependencies'
]

[tool.hatch.envs.test.scripts]
unit = "pytest -rp --disable-warnings"
unit-html = "pytest --html=testreports/index.html" # generate html report (warning: uses an aging plugin, 11-2023)
integration = "pytest tests/integration"
coverage = "pytest --cov=src/open_mpic_core --cov-report=term-missing --cov-report=html"
profile = "pytest --profile"

[tool.hatch.envs.hatch-test]
features = [
    "test" # each element here must be defined in 'project.optional-dependencies'
]
default-args = ["tests/unit"]
randomize = true

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
testpaths = [
    "tests/unit"
]
python_functions = [
    "*_should_*",
]
markers = [
    "integration: mark test as an integration test",
    "unit: mark test as a unit test",  # optional
]
addopts = [
    "--import-mode=prepend",  # explicit default, as the tests rely on it for proper import resolution
]
spec_header_format = "Spec for {test_case} ({path}):"
spec_test_format = "{result} {docstring_summary}"  # defaults to {name} if docstring is not present in test
asyncio_mode = "auto"  # defaults to "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/open_mpic_core"]
#source_pkgs = ["open_mpic_core", "tests"]
branch = true
parallel = true
omit = [
  "*/src/*/__about__.py",
  "*/src/*/__init__.py"
]

[tool.coverage.report]
include_namespace_packages = true
omit = [
    "*/src/*/__about__.py",
]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.black]
line-length = 120

# what is this for?
[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/open_mpic_core tests}"
